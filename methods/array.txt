Creating arrays:
int[] numbers = new int[5];
int[] numbers = {1, 2, 3, 4, 5};

Traversing arrays:
for(int i = 0; i < array.length; i++)
for(dataType element : array)

Methods:
toString: static String toString(array) - String str = Arrays.toString(arr);
asList: static <T> List<T> asList(T... a) - List<Integer> list = Arrays.asList(arr);
binarySearch: static int binarySearch(int[] a, int key) - int index = Arrays.binarySearch(intArr, key);
              static int binarySearch(int[] a, int fromIndex, int toIndex, int key) - int index = Arrays.binarySearch(intArr, fromIndex, toIndex, key);
sort: static void sort(int[] a) - Arrays.sort(arr);
      static void sort(int[] a, int fromIndex, int toIndex) - Arrays.sort(intArr, 1, 4);
copyOf: static int[] copyOf(int[] original, int newLength) - int[] copy = Arrays.copyOf(org, 5);
copyOfRange: static int[] copyOfRange(int[] original, int fromIndex, int toIndex) - int[] copy = Arrays.copyOfRange(org, 1, 3);
compare: static int compare(int[] a, int[] b) - int result = Arrays.compare(intArr1, intArr2); // result will be -1 since arr1 < arr2
equals: static boolean equals(int[] a, int[] b) - boolean result = Arrays.equals(intArr, intArr1);
fill: static void fill(int[] a, int val) - Arrays.fill(intArr, intKey)
